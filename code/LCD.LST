
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	..\LCD.asm
	Object File:	..\LCD.hex
	List File:	..\LCD.lst



 Line  I  Addr  Code            Source

    1:				;----------------------------------------------------------
    2:				; Testing LCD and creating its functions
    3:				;----------------------------------------------------------
    4:
    5:		B      0095	LCD_RS      EQU  P1.5
    6:		B      0096	LCD_RW      EQU  P1.6
    7:		B      0097	LCD_EN      EQU  P1.7
    8:		D      00B0	LCD_DATA    EQU  P3
    9:
   10:		N      0000	ORG 0000h
   11:	  0000	02 00 A2	LJMP START
   12:
   13:				;=======================
   14:				; LCD SUB_ROUTINES
   15:				;=======================
   16:	  0003			LCD_DELAY:
   17:	  0003	79 FF		    MOV R1, #255
   18:	  0005	7A FF		DL1: MOV R2, #255
   19:	  0007	DA FE		DL2: DJNZ R2, DL2
   20:	  0009	D9 FA		     DJNZ R1, DL1
   21:	  000B	22		     RET
   22:
   23:	  000C			LCD_CMD: ; to send LCD commands
   24:	  000C	C2 95		    CLR LCD_RS
   25:	  000E	C2 96		    CLR LCD_RW
   26:	  0010	D2 97		    SETB LCD_EN
   27:	  0012	F5 B0		    MOV LCD_DATA, A
   28:	  0014	11 03		    ACALL LCD_DELAY
   29:	  0016	C2 97		    CLR LCD_EN
   30:	  0018	22		    RET
   31:
   32:	  0019			LCD_DATA_WRITE:
   33:	  0019	D2 95		    SETB LCD_RS
   34:	  001B	C2 96		    CLR LCD_RW
   35:	  001D	D2 97		    SETB LCD_EN
   36:	  001F	F5 B0		    MOV LCD_DATA, A
   37:	  0021	11 03		    ACALL LCD_DELAY
   38:	  0023	C2 97		    CLR LCD_EN
   39:	  0025	22		    RET
   40:
   41:	  0026			LCD_INIT:
   42:	  0026	74 38		    MOV A, #38H     ; 8-bit, 2-line
   43:	  0028	11 0C		    ACALL LCD_CMD

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44:	  002A	74 0E		    MOV A, #0EH     ; Display ON, Cursor ON
   45:	  002C	11 0C		    ACALL LCD_CMD
   46:	  002E	74 01		    MOV A, #01H     ; Clear display
   47:	  0030	11 0C		    ACALL LCD_CMD
   48:	  0032	74 06		    MOV A, #06H     ; Entry mode
   49:	  0034	11 0C		    ACALL LCD_CMD
   50:	  0036	22		    RET
   51:
   52:	  0037			LCD_SEND_STRING:
   53:	  0037	E4		    CLR A
   54:	  0038	93		    MOVC A, @A+DPTR
   55:	  0039	60 05		    JZ LCD_STRING_DONE
   56:	  003B	11 19		    ACALL LCD_DATA_WRITE
   57:	  003D	A3		    INC DPTR
   58:	  003E	80 F7		    SJMP LCD_SEND_STRING
   59:	  0040			LCD_STRING_DONE:
   60:	  0040	22		    RET
   61:
   62:				;----------------------------------------------------------
   63:				;  LCD_SEND_DECIMAL  – prints an 8-bit value in A (0-255)
   64:				;    • no leading zeros for <100 (prints “7”, “42”, “255”, …)
   65:				;----------------------------------------------------------
   66:	  0041			LCD_SEND_DECIMAL:
   67:	  0041	75 F0 64	    MOV     B,#100          ; 1)  hundreds
   68:	  0044	84		    DIV     AB              ;    A = hundreds, B = 0-99 remainder
   69:	  0045	FC		    MOV     R4,A            ;    save hundreds
   70:	  0046	E5 F0		    MOV     A,B             ; 2)  tens / ones
   71:	  0048	75 F0 0A	    MOV     B,#10
   72:	  004B	84		    DIV     AB              ;    A = tens, B = ones
   73:	  004C	FD		    MOV     R5,A
   74:	  004D	AE F0		    MOV     R6,B
   75:
   76:				    ; -------- print hundreds if non-zero ---------------
   77:	  004F	EC		    MOV     A,R4
   78:	  0050	60 04		    JZ      SKIP_HUNDREDS
   79:	  0052	24 30		    ADD     A,#'0'
   80:	  0054	11 19		    ACALL   LCD_DATA_WRITE
   81:	  0056			SKIP_HUNDREDS:
   82:				    ; -------- print tens (always if hundreds shown) ----
   83:	  0056	ED		    MOV     A,R5
   84:	  0057	60 06		    JZ      SKIP_TENS
   85:	  0059	24 30		    ADD     A,#'0'
   86:	  005B	11 19		    ACALL   LCD_DATA_WRITE
   87:	  005D	80 09		    SJMP    PRINT_ONES
   88:	  005F			SKIP_TENS:
   89:				    ; if both hundreds and tens were zero, we still need one ‘0’
   90:	  005F	EC		    MOV     A,R4
   91:	  0060	70 06		    JNZ     PRINT_ONES      ; already printed a hundreds digit
   92:	  0062	74 30		    MOV     A,#'0'          ; value was 0-9, so show a single 0
   93:	  0064	11 19		    ACALL   LCD_DATA_WRITE
   94:	  0066	80 05		    SJMP    DONE_DEC
   95:	  0068			PRINT_ONES:
   96:	  0068	EE		    MOV     A,R6
   97:	  0069	24 30		    ADD     A,#'0'
   98:	  006B	11 19		    ACALL   LCD_DATA_WRITE
   99:	  006D			DONE_DEC:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

  100:	  006D	22		    RET
  101:
  102:	  006E			LCD_SEND_HEX:      ;send values to R6 first
  103:	  006E	F5 F0		    MOV B, A
  104:	  0070	C4		    SWAP A
  105:	  0071	54 0F		    ANL A, #0Fh
  106:	  0073	11 80		    ACALL HEX_TO_ASCII
  107:	  0075	11 19		    ACALL LCD_DATA_WRITE
  108:
  109:	  0077	E5 F0		    MOV A, B
  110:	  0079	54 0F		    ANL A, #0Fh
  111:	  007B	11 80		    ACALL HEX_TO_ASCII
  112:	  007D	11 19		    ACALL LCD_DATA_WRITE
  113:	  007F	22		    RET
  114:
  115:				;----------------------------------------------------------
  116:				;  HEX_TO_ASCII  – expects 0-15 in A, returns ‘0’…‘F’ in A (uses a ROM look-up so it’s
				 always right)
  117:				;----------------------------------------------------------
  118:	  0080			HEX_TO_ASCII:
  119:	  0080	C0 82		    PUSH    DPL             ; keep caller’s DPTR safe
  120:	  0082	C0 83		    PUSH    DPH
  121:	  0084	90 00 DF	    MOV     DPTR,#HEX_TAB   ; point to table
  122:	  0087	93		    MOVC    A,@A+DPTR       ; fetch the correct character
  123:	  0088	D0 83		    POP     DPH
  124:	  008A	D0 82		    POP     DPL
  125:	  008C	22		    RET
  126:
  127:				;=======================
  128:				; Delay ≈ 500 µs
  129:	  008D			DELAY_500US:
  130:	  008D	7A 05		    MOV R2, #5
  131:	  008F	7B 28		L1: MOV R3, #40
  132:	  0091	00		L2: NOP
  133:	  0092	DB FD		    DJNZ R3, L2
  134:	  0094	DA F9		    DJNZ R2, L1
  135:	  0096	22		    RET
  136:
  137:				;=======================
  138:				; Delay ≈10 µs
  139:	  0097			DELAY_10US:
  140:	  0097	00		    NOP
  141:	  0098	00		    NOP
  142:	  0099	00		    NOP
  143:	  009A	00		    NOP
  144:	  009B	00		    NOP
  145:	  009C	00		    NOP
  146:	  009D	00		    NOP
  147:	  009E	00		    NOP
  148:	  009F	00		    NOP
  149:	  00A0	00		    NOP
  150:	  00A1	22		    RET
  151:
  152:				;----------------------------------------------------------
  153:				; START
  154:	  00A2			START:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  155:	  00A2	11 26		    ACALL LCD_INIT
  156:
  157:	  00A4			MAIN_LOOP:
  158:	  00A4	7A 56		    MOV R2, #86
  159:	  00A6	7B 56		    MOV R3, #86
  160:	  00A8	EA		    MOV A, R2
  161:	  00A9	2B		    ADD A, R3
  162:	  00AA	FE		    MOV R6, A
  163:
  164:				    ; Show Hex
  165:	  00AB	90 00 D3	    MOV DPTR, #MSG_HEX
  166:	  00AE	11 37		    ACALL LCD_SEND_STRING
  167:	  00B0	EE		    MOV A,R6
  168:	  00B1	11 6E		    ACALL LCD_SEND_HEX
  169:
  170:				    ; ---- move cursor to start of line 2 ------------------
  171:	  00B3	74 C0		    MOV  A,#0C0h              ; DDRAM addr 40 → line 2, col 0
  172:	  00B5	11 0C		    ACALL LCD_CMD
  173:
  174:				    ; Line 2 or second part
  175:	  00B7	90 00 D9	    MOV DPTR, #MSG_DEC
  176:	  00BA	11 37		    ACALL LCD_SEND_STRING
  177:	  00BC	EE		    MOV A,R6
  178:	  00BD	11 41		    ACALL LCD_SEND_DECIMAL
  179:
  180:				    ; ---------- clear display & wait -------------------------
  181:	  00BF	74 01		    MOV   A,#01h             ; Clear-Display command
  182:	  00C1	11 0C		    ACALL LCD_CMD            ; sends it
  183:	  00C3	11 03		    ACALL LCD_DELAY          ; yields plenty of time (> 1.6 ms)
  184:
  185:				    ; ---------- start over -----------------------------------
  186:	  00C5	80 DD		    SJMP  MAIN_LOOP
  187:
  188:				;----------------------------------------------------------
  189:
  190:	  00C7	48 45 4C 4C	MSG_HELLO: DB "HELLO_WORLD",0
	  00CB	4F 5F 57 4F
	  00CF	52 4C 44 00
  191:	  00D3	48 45 58 3A	MSG_HEX:   DB "HEX: ", 0
	  00D7	20 00
  192:	  00D9	44 45 43 3A	MSG_DEC:   DB "DEC: ", 0
	  00DD	20 00
  193:	  00DF	30 31 32 33	HEX_TAB: DB  "0123456789ABCDEF" ; 16-byte table
	  00E3	34 35 36 37
	  00E7	38 39 41 42
	  00EB	43 44 45 46
  194:
  195:				END





                     register banks used:  ---

                     no errors

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5







ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
B				  DATA	      F0
CY				  BIT	      D7
DELAY_10US			  CODE	    0097	 139
DELAY_500US			  CODE	    008D	 129
DL1				  CODE	    0005	  18
DL2				  CODE	    0007	  19
DONE_DEC			  CODE	    006D	  99
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
HEX_TAB				  CODE	    00DF	 193
HEX_TO_ASCII			  CODE	    0080	 118
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INT0				  BIT	      B2
INT1				  BIT	      B3
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
L1				  CODE	    008F	 131
L2				  CODE	    0091	 132
LCD_CMD				  CODE	    000C	  23
LCD_DATA			  NUMBER    00B0	   8
LCD_DATA_WRITE			  CODE	    0019	  32
LCD_DELAY			  CODE	    0003	  16
LCD_EN				  NUMBER    0097	   7
LCD_INIT			  CODE	    0026	  41
LCD_RS				  NUMBER    0095	   5
LCD_RW				  NUMBER    0096	   6
LCD_SEND_DECIMAL		  CODE	    0041	  66
LCD_SEND_HEX			  CODE	    006E	 102
LCD_SEND_STRING			  CODE	    0037	  52
LCD_STRING_DONE			  CODE	    0040	  59
MAIN_LOOP			  CODE	    00A4	 157
MSG_DEC				  CODE	    00D9	 192
MSG_HELLO			  CODE	    00C7	 190
MSG_HEX				  CODE	    00D3	 191

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PCON				  DATA	      87
PRINT_ONES			  CODE	    0068	  95
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PX0				  BIT	      B8
PX1				  BIT	      BA
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RI				  BIT	      98
RS0				  BIT	      D3
RS1				  BIT	      D4
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SINT				  CODE	    0023
SKIP_HUNDREDS			  CODE	    0056	  81
SKIP_TENS			  CODE	    005F	  88
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SP				  DATA	      81
START				  CODE	    00A2	 154
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TXD				  BIT	      B1
WR				  BIT	      B6
