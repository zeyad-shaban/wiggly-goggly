
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	..\LCD.asm
	Object File:	..\LCD.hex
	List File:	..\LCD.lst



 Line  I  Addr  Code            Source

    1:				;----------------------------------------------------------
    2:				; Project: Ultrasonic Echo Timer Measurement with LCD
    3:				;----------------------------------------------------------
    4:
    5:		B      0091	US_TRIG_R   EQU  P1.1
    6:		B      0090	US_ECHO_R   EQU  P1.0
    7:
    8:		B      0095	LCD_RS      EQU  P1.5
    9:		B      0096	LCD_RW      EQU  P1.6
   10:		B      0097	LCD_EN      EQU  P1.7
   11:		D      00B0	LCD_DATA    EQU  P3
   12:
   13:				;----------------------------------------------------------
   14:		N      0000	ORG 0000h
   15:	  0000	02 00 A2	LJMP START
   16:
   17:				;=======================
   18:				; LCD ROUTINES
   19:				;=======================
   20:	  0003			LCD_DELAY:
   21:	  0003	79 FF		    MOV R1, #255
   22:	  0005	7A FF		DL1: MOV R2, #255
   23:	  0007	DA FE		DL2: DJNZ R2, DL2
   24:	  0009	D9 FA		     DJNZ R1, DL1
   25:	  000B	22		     RET
   26:
   27:	  000C			LCD_CMD:
   28:	  000C	C2 95		    CLR LCD_RS
   29:	  000E	C2 96		    CLR LCD_RW
   30:	  0010	D2 97		    SETB LCD_EN
   31:	  0012	F5 B0		    MOV LCD_DATA, A
   32:	  0014	11 03		    ACALL LCD_DELAY
   33:	  0016	C2 97		    CLR LCD_EN
   34:	  0018	22		    RET
   35:
   36:	  0019			LCD_DATA_WRITE:
   37:	  0019	D2 95		    SETB LCD_RS
   38:	  001B	C2 96		    CLR LCD_RW
   39:	  001D	D2 97		    SETB LCD_EN
   40:	  001F	F5 B0		    MOV LCD_DATA, A
   41:	  0021	11 03		    ACALL LCD_DELAY
   42:	  0023	C2 97		    CLR LCD_EN
   43:	  0025	22		    RET

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44:
   45:	  0026			LCD_INIT:
   46:	  0026	74 38		    MOV A, #38H     ; 8-bit, 2-line
   47:	  0028	11 0C		    ACALL LCD_CMD
   48:	  002A	74 0E		    MOV A, #0EH     ; Display ON, Cursor ON
   49:	  002C	11 0C		    ACALL LCD_CMD
   50:	  002E	74 01		    MOV A, #01H     ; Clear display
   51:	  0030	11 0C		    ACALL LCD_CMD
   52:	  0032	74 06		    MOV A, #06H     ; Entry mode
   53:	  0034	11 0C		    ACALL LCD_CMD
   54:	  0036	22		    RET
   55:
   56:	  0037			LCD_SEND_STRING:
   57:	  0037	E4		    CLR A
   58:	  0038	93		    MOVC A, @A+DPTR
   59:	  0039	60 05		    JZ LCD_STRING_DONE
   60:	  003B	11 19		    ACALL LCD_DATA_WRITE
   61:	  003D	A3		    INC DPTR
   62:	  003E	80 F7		    SJMP LCD_SEND_STRING
   63:	  0040			LCD_STRING_DONE:
   64:	  0040	22		    RET
   65:
   66:				;----------------------------------------------------------
   67:				;  LCD_SEND_DECIMAL  – prints an 8-bit value in A (0-255)
   68:				;    • no leading zeros for <100 (prints “7”, “42”, “255”, …)
   69:				;----------------------------------------------------------
   70:	  0041			LCD_SEND_DECIMAL:
   71:	  0041	75 F0 64	    MOV     B,#100          ; 1)  hundreds
   72:	  0044	84		    DIV     AB              ;    A = hundreds, B = 0-99 remainder
   73:	  0045	FC		    MOV     R4,A            ;    save hundreds
   74:	  0046	E5 F0		    MOV     A,B             ; 2)  tens / ones
   75:	  0048	75 F0 0A	    MOV     B,#10
   76:	  004B	84		    DIV     AB              ;    A = tens, B = ones
   77:	  004C	FD		    MOV     R5,A
   78:	  004D	AE F0		    MOV     R6,B
   79:
   80:				    ; -------- print hundreds if non-zero ---------------
   81:	  004F	EC		    MOV     A,R4
   82:	  0050	60 04		    JZ      SKIP_HUNDREDS
   83:	  0052	24 30		    ADD     A,#'0'
   84:	  0054	11 19		    ACALL   LCD_DATA_WRITE
   85:	  0056			SKIP_HUNDREDS:
   86:				    ; -------- print tens (always if hundreds shown) ----
   87:	  0056	ED		    MOV     A,R5
   88:	  0057	60 06		    JZ      SKIP_TENS
   89:	  0059	24 30		    ADD     A,#'0'
   90:	  005B	11 19		    ACALL   LCD_DATA_WRITE
   91:	  005D	80 09		    SJMP    PRINT_ONES
   92:	  005F			SKIP_TENS:
   93:				    ; if both hundreds and tens were zero, we still need one ‘0’
   94:	  005F	EC		    MOV     A,R4
   95:	  0060	70 06		    JNZ     PRINT_ONES      ; already printed a hundreds digit
   96:	  0062	74 30		    MOV     A,#'0'          ; value was 0-9, so show a single 0
   97:	  0064	11 19		    ACALL   LCD_DATA_WRITE
   98:	  0066	80 05		    SJMP    DONE_DEC
   99:	  0068			PRINT_ONES:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

  100:	  0068	EE		    MOV     A,R6
  101:	  0069	24 30		    ADD     A,#'0'
  102:	  006B	11 19		    ACALL   LCD_DATA_WRITE
  103:	  006D			DONE_DEC:
  104:	  006D	22		    RET
  105:
  106:	  006E			LCD_SEND_HEX:      ;send values to R6 first
  107:	  006E	F5 F0		    MOV B, A
  108:	  0070	C4		    SWAP A
  109:	  0071	54 0F		    ANL A, #0Fh
  110:	  0073	11 80		    ACALL HEX_TO_ASCII
  111:	  0075	11 19		    ACALL LCD_DATA_WRITE
  112:
  113:	  0077	E5 F0		    MOV A, B
  114:	  0079	54 0F		    ANL A, #0Fh
  115:	  007B	11 80		    ACALL HEX_TO_ASCII
  116:	  007D	11 19		    ACALL LCD_DATA_WRITE
  117:	  007F	22		    RET
  118:
  119:
  120:				;----------------------------------------------------------
  121:				;  HEX_TO_ASCII  – expects 0-15 in A, returns ‘0’…‘F’ in A
  122:				;                 (uses a ROM look-up so it’s always right)
  123:				;----------------------------------------------------------
  124:	  0080			HEX_TO_ASCII:
  125:	  0080	C0 82		        PUSH    DPL             ; keep caller’s DPTR safe
  126:	  0082	C0 83		        PUSH    DPH
  127:	  0084	90 00 DF	        MOV     DPTR,#HEX_TAB   ; point to table
  128:	  0087	93		        MOVC    A,@A+DPTR       ; fetch the correct character
  129:	  0088	D0 83		        POP     DPH
  130:	  008A	D0 82		        POP     DPL
  131:	  008C	22		        RET
  132:
  133:
  134:
  135:
  136:				;=======================
  137:				; Delay ≈ 500 µs
  138:	  008D			DELAY_500US:
  139:	  008D	7A 05		    MOV R2, #5
  140:	  008F	7B 28		L1: MOV R3, #40
  141:	  0091	00		L2: NOP
  142:	  0092	DB FD		    DJNZ R3, L2
  143:	  0094	DA F9		    DJNZ R2, L1
  144:	  0096	22		    RET
  145:
  146:				;=======================
  147:				; Delay ≈10 µs
  148:	  0097			DELAY_10US:
  149:	  0097	00		    NOP
  150:	  0098	00		    NOP
  151:	  0099	00		    NOP
  152:	  009A	00		    NOP
  153:	  009B	00		    NOP
  154:	  009C	00		    NOP
  155:	  009D	00		    NOP

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  156:	  009E	00		    NOP
  157:	  009F	00		    NOP
  158:	  00A0	00		    NOP
  159:	  00A1	22		    RET
  160:
  161:				;----------------------------------------------------------
  162:				; START
  163:	  00A2			START:
  164:	  00A2	11 26		    ACALL LCD_INIT
  165:
  166:	  00A4			MAIN_LOOP:
  167:	  00A4	7A 56		    MOV R2, #86
  168:	  00A6	7B 56		    MOV R3, #86
  169:	  00A8	EA		    MOV A, R2
  170:	  00A9	2B		    ADD A, R3
  171:	  00AA	FE		    MOV R6, A
  172:
  173:	  00AB			Print:
  174:				    ; Show Hex
  175:	  00AB	90 00 D3	    MOV DPTR, #MSG_HEX
  176:	  00AE	11 37		    ACALL LCD_SEND_STRING
  177:	  00B0	EE		    MOV A,R6
  178:	  00B1	11 6E		    ACALL LCD_SEND_HEX
  179:
  180:				    ; ---- move cursor to start of line 2 ------------------
  181:	  00B3	74 C0		    MOV  A,#0C0h              ; DDRAM addr 40 → line 2, col 0
  182:	  00B5	11 0C		    ACALL LCD_CMD
  183:
  184:				    ; Line 2 or second part
  185:	  00B7	90 00 D9	    MOV DPTR, #MSG_DEC
  186:	  00BA	11 37		    ACALL LCD_SEND_STRING
  187:	  00BC	EE		    MOV A,R6
  188:	  00BD	11 41		    ACALL LCD_SEND_DECIMAL
  189:
  190:				    ; ---------- clear display & wait -------------------------
  191:	  00BF	74 01		    MOV   A,#01h             ; Clear-Display command
  192:	  00C1	11 0C		    ACALL LCD_CMD            ; sends it
  193:	  00C3	11 03		    ACALL LCD_DELAY          ; yields plenty of time (> 1.6 ms)
  194:
  195:				    ; ---------- start over -----------------------------------
  196:	  00C5	80 E4		    SJMP  Print
  197:
  198:				;----------------------------------------------------------
  199:
  200:	  00C7	48 45 4C 4C	MSG_HELLO: DB "HELLO_WORLD",0
	  00CB	4F 5F 57 4F
	  00CF	52 4C 44 00
  201:	  00D3	48 45 58 3A	MSG_HEX:   DB "HEX: ", 0
	  00D7	20 00
  202:	  00D9	44 45 43 3A	MSG_DEC:   DB "DEC: ", 0
	  00DD	20 00
  203:	  00DF	30 31 32 33	HEX_TAB: DB  "0123456789ABCDEF" ; 16-byte table
	  00E3	34 35 36 37
	  00E7	38 39 41 42
	  00EB	43 44 45 46
  204:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  205:				END





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
B				  DATA	      F0
CY				  BIT	      D7
DELAY_10US			  CODE	    0097	 148
DELAY_500US			  CODE	    008D	 138
DL1				  CODE	    0005	  22
DL2				  CODE	    0007	  23
DONE_DEC			  CODE	    006D	 103
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
HEX_TAB				  CODE	    00DF	 203
HEX_TO_ASCII			  CODE	    0080	 124
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INT0				  BIT	      B2
INT1				  BIT	      B3
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
L1				  CODE	    008F	 140
L2				  CODE	    0091	 141
LCD_CMD				  CODE	    000C	  27
LCD_DATA			  NUMBER    00B0	  11
LCD_DATA_WRITE			  CODE	    0019	  36
LCD_DELAY			  CODE	    0003	  20
LCD_EN				  NUMBER    0097	  10
LCD_INIT			  CODE	    0026	  45
LCD_RS				  NUMBER    0095	   8
LCD_RW				  NUMBER    0096	   9
LCD_SEND_DECIMAL		  CODE	    0041	  70
LCD_SEND_HEX			  CODE	    006E	 106
LCD_SEND_STRING			  CODE	    0037	  56
LCD_STRING_DONE			  CODE	    0040	  63
MAIN_LOOP			  CODE	    00A4	 166
MSG_DEC				  CODE	    00D9	 202
MSG_HELLO			  CODE	    00C7	 200
MSG_HEX				  CODE	    00D3	 201

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PCON				  DATA	      87
PRINT				  CODE	    00AB	 173
PRINT_ONES			  CODE	    0068	  99
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PX0				  BIT	      B8
PX1				  BIT	      BA
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RI				  BIT	      98
RS0				  BIT	      D3
RS1				  BIT	      D4
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SINT				  CODE	    0023
SKIP_HUNDREDS			  CODE	    0056	  85
SKIP_TENS			  CODE	    005F	  92
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SP				  DATA	      81
START				  CODE	    00A2	 163
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TXD				  BIT	      B1
US_ECHO_R			  NUMBER    0090	   6
US_TRIG_R			  NUMBER    0091	   5
WR				  BIT	      B6
