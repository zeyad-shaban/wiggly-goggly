
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	..\main.asm
	Object File:	..\main.hex
	List File:	..\main.lst



 Line  I  Addr  Code            Source

    1:				;----------------------------------------------------------
    2:				; Project: Ultrasonic Echo Timer Measurement
    3:				; Clock  : 11.0592 MHz
    4:				; UART   : 9600 baud
    5:				; UART output = raw TH0/TL0 count of ECHO pulse width
    6:				;----------------------------------------------------------
    7:
    8:		B      0091	US_TRIG_R   EQU  P1.1    ; Right Trigger pin
    9:		B      0090	US_ECHO_R   EQU  P1.0    ; Right Echo pin
   10:		B      0097	BUZZ EQU P1.7; Buzzer
   11:		N      000A	BASE_DELAY  EQU  10      ; Minimum delay (max frequency)
   12:
   13:		B      00A1	VIBE EQU P2.1; Vibration motor
   14:		B      00A2	LED0 EQU P2.2; 30cm
   15:		B      00A3	LED1 EQU P2.3; 40cm
   16:		B      00A4	LED2 EQU P2.4; 50cm
   17:		B      00A5	LED3 EQU P2.5; 60cm
   18:		B      00A6	LED4 EQU P2.6; 70cm
   19:		B      00A7	LED5 EQU P2.7; >70cm
   20:
   21:		B      0093	LED_OUT EQU P1.3;out of range
   22:
   23:		B      0092	LCD_RS      EQU  P1.2
   24:		B      0093	LCD_RW      EQU  P1.3
   25:		B      0094	LCD_EN      EQU  P1.4
   26:		D      00B0	LCD_DATA    EQU  P3
   27:
   28:
   29:		N      0000	ORG 0000h
   30:	  0000	02 00 B5	LJMP START
   31:
   32:				;=======================
   33:				; LCD SUB_ROUTINES
   34:				;=======================
   35:
   36:	  0003			LCD_DELAY:
   37:	  0003	79 FF		    MOV R1, #255
   38:	  0005	7A FF		DL1: MOV R2, #255
   39:	  0007	DA FE		DL2: DJNZ R2, DL2
   40:	  0009	D9 FA		     DJNZ R1, DL1
   41:	  000B	22		     RET
   42:
   43:	  000C			LCD_CMD: ; to send LCD commands

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44:	  000C	C2 92		    CLR LCD_RS
   45:	  000E	C2 93		    CLR LCD_RW
   46:	  0010	D2 94		    SETB LCD_EN
   47:	  0012	F5 B0		    MOV LCD_DATA, A
   48:	  0014	11 03		    ACALL LCD_DELAY
   49:	  0016	C2 94		    CLR LCD_EN
   50:	  0018	22		    RET
   51:
   52:	  0019			LCD_DATA_WRITE:
   53:	  0019	D2 92		    SETB LCD_RS
   54:	  001B	C2 93		    CLR LCD_RW
   55:	  001D	D2 94		    SETB LCD_EN
   56:	  001F	F5 B0		    MOV LCD_DATA, A
   57:				    ;ACALL LCD_DELAY ;remove when offical code tetsing
   58:	  0021	C2 94		    CLR LCD_EN
   59:	  0023	22		    RET
   60:
   61:	  0024			LCD_INIT:
   62:	  0024	74 38		    MOV A, #38H     ; 8-bit, 2-line
   63:	  0026	11 0C		    ACALL LCD_CMD
   64:	  0028	74 0E		    MOV A, #0EH     ; Display ON, Cursor ON
   65:	  002A	11 0C		    ACALL LCD_CMD
   66:	  002C	74 01		    MOV A, #01H     ; Clear display
   67:	  002E	11 0C		    ACALL LCD_CMD
   68:	  0030	74 06		    MOV A, #06H     ; Entry mode
   69:	  0032	11 0C		    ACALL LCD_CMD
   70:	  0034	22		    RET
   71:
   72:				; )NOTE: must move value you wish to print into register DPTR)
   73:	  0035			LCD_SEND_STRING:
   74:	  0035	E4		    CLR A
   75:	  0036	93		    MOVC A, @A+DPTR
   76:	  0037	60 05		    JZ LCD_STRING_DONE
   77:	  0039	11 19		    ACALL LCD_DATA_WRITE
   78:	  003B	A3		    INC DPTR
   79:	  003C	80 F7		    SJMP LCD_SEND_STRING
   80:	  003E			LCD_STRING_DONE:
   81:	  003E	22		    RET
   82:
   83:	  003F			LCD_CLEAR:
   84:	  003F	74 01		    MOV   A,#01h             ; Clear-Display command
   85:	  0041	11 0C		    ACALL LCD_CMD            ; sends it
   86:	  0043	11 03		    ACALL LCD_DELAY          ; yields plenty of time (> 1.6 ms)
   87:	  0045	22		    RET
   88:
   89:				;----------------------------------------------------------
   90:				;  LCD_SEND_DECIMAL  – prints an 8-bit value in A (0-255)
   91:				; )NOTE: must move value you wish to print into register A)
   92:				;----------------------------------------------------------
   93:	  0046			LCD_SEND_DECIMAL:
   94:	  0046	75 F0 64	    MOV     B,#100          ; 1)  hundreds
   95:	  0049	84		    DIV     AB              ;    A = hundreds, B = 0-99 remainder
   96:	  004A	FC		    MOV     R4,A            ;    save hundreds
   97:	  004B	E5 F0		    MOV     A,B             ; 2)  tens / ones
   98:	  004D	75 F0 0A	    MOV     B,#10
   99:	  0050	84		    DIV     AB              ;    A = tens, B = ones

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

  100:	  0051	FD		    MOV     R5,A
  101:	  0052	AE F0		    MOV     R6,B
  102:
  103:				    ; -------- print hundreds if non-zero ---------------
  104:	  0054	EC		    MOV     A,R4
  105:	  0055	60 04		    JZ      SKIP_HUNDREDS
  106:	  0057	24 30		    ADD     A,#'0'
  107:	  0059	11 19		    ACALL   LCD_DATA_WRITE
  108:	  005B			SKIP_HUNDREDS:
  109:				    ; -------- print tens (always if hundreds shown) ----
  110:	  005B	ED		    MOV     A,R5
  111:	  005C	60 06		    JZ      SKIP_TENS
  112:	  005E	24 30		    ADD     A,#'0'
  113:	  0060	11 19		    ACALL   LCD_DATA_WRITE
  114:	  0062	80 09		    SJMP    PRINT_ONES
  115:	  0064			SKIP_TENS:
  116:				    ; if both hundreds and tens were zero, we still need one ‘0’
  117:	  0064	EC		    MOV     A,R4
  118:	  0065	70 06		    JNZ     PRINT_ONES      ; already printed a hundreds digit
  119:	  0067	74 30		    MOV     A,#'0'          ; value was 0-9, so show a single 0
  120:	  0069	11 19		    ACALL   LCD_DATA_WRITE
  121:	  006B	80 05		    SJMP    DONE_DEC
  122:	  006D			PRINT_ONES:
  123:	  006D	EE		    MOV     A,R6
  124:	  006E	24 30		    ADD     A,#'0'
  125:	  0070	11 19		    ACALL   LCD_DATA_WRITE
  126:	  0072			DONE_DEC:
  127:	  0072	22		    RET
  128:
  129:	  0073			LCD_SEND_HEX:      ;send values to R6 first
  130:	  0073	F5 F0		    MOV B, A
  131:	  0075	C4		    SWAP A
  132:	  0076	54 0F		    ANL A, #0Fh
  133:	  0078	11 85		    ACALL HEX_TO_ASCII
  134:	  007A	11 19		    ACALL LCD_DATA_WRITE
  135:
  136:	  007C	E5 F0		    MOV A, B
  137:	  007E	54 0F		    ANL A, #0Fh
  138:	  0080	11 85		    ACALL HEX_TO_ASCII
  139:	  0082	11 19		    ACALL LCD_DATA_WRITE
  140:	  0084	22		    RET
  141:
  142:				;----------------------------------------------------------
  143:				;  HEX_TO_ASCII  – expects 0-15 in A, returns ‘0’…‘F’ in A (uses a ROM look-up so it’s
				 always right)
  144:				;----------------------------------------------------------
  145:	  0085			HEX_TO_ASCII:
  146:	  0085	C0 82		    PUSH    DPL             ; keep caller’s DPTR safe
  147:	  0087	C0 83		    PUSH    DPH
  148:	  0089	90 01 B8	    MOV     DPTR,#HEX_TAB   ; point to table
  149:	  008C	93		    MOVC    A,@A+DPTR       ; fetch the correct character
  150:	  008D	D0 83		    POP     DPH
  151:	  008F	D0 82		    POP     DPL
  152:	  0091	22		    RET
  153:
  154:				; Delay ≈ 500 µs

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  155:	  0092			DELAY_500MS:
  156:	  0092	7A 64		    MOV R2, #100
  157:	  0094	7B 64		L3: MOV R3, #100
  158:	  0096	79 0E		L4: MOV R1, #14
  159:	  0098	00		L5: NOP
  160:	  0099	D9 FD		    DJNZ R1, L5
  161:	  009B	DB F9		    DJNZ R3, L4
  162:	  009D	DA F5		    DJNZ R2, L3
  163:	  009F	22		    RET
  164:
  165:				; Delay ≈ 500 µs
  166:	  00A0			DELAY_500US:
  167:	  00A0	7A 05		    MOV R2, #5
  168:	  00A2	7B 28		L1: MOV R3, #40
  169:	  00A4	00		L2: NOP
  170:	  00A5	DB FD		    DJNZ R3, L2
  171:	  00A7	DA F9		    DJNZ R2, L1
  172:	  00A9	22		    RET
  173:
  174:				;----------------------------------------------------------
  175:				; Delay ≈10 µs
  176:	  00AA			DELAY_10US:
  177:	  00AA	00		    NOP
  178:	  00AB	00		    NOP
  179:	  00AC	00		    NOP
  180:	  00AD	00		    NOP
  181:	  00AE	00		    NOP
  182:	  00AF	00		    NOP
  183:	  00B0	00		    NOP
  184:	  00B1	00		    NOP
  185:	  00B2	00		    NOP
  186:	  00B3	00		    NOP
  187:	  00B4	22		    RET
  188:
  189:				;----------------------------------------------------------
  190:				; START
  191:	  00B5			START:
  192:	  00B5	75 89 01	    MOV TMOD, #01H       ; Timer1 Mode 2 (for UART), Timer0 Mode 1
  193:	  00B8	C2 8C		    CLR TR0               ; Ensure Timer0 OFF
  194:
  195:	  00BA	75 8A 00	    MOV TL0, #00h  ; Reset Timer0 for next round
  196:	  00BD	75 8C 00	    MOV TH0, #00h
  197:
  198:	  00C0	C2 A2		    CLR LED0 ; make sure all pins are ready
  199:	  00C2	C2 A3		    CLR LED1
  200:	  00C4	C2 A4		    CLR LED2
  201:	  00C6	C2 A5		    CLR LED3
  202:	  00C8	C2 A6		    CLR LED4
  203:	  00CA	C2 A7		    CLR LED5
  204:
  205:	  00CC	C2 97		    CLR BUZZ ;clear feedback outputs
  206:	  00CE	C2 A1		    CLR VIBE
  207:
  208:	  00D0	C2 91		    CLR US_TRIG_R ;clear trig and echo for ultrasonic
  209:	  00D2	C2 90		    CLR US_ECHO_R
  210:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  211:	  00D4	C2 92		    CLR LCD_RS ;clear lcd controls and data port
  212:	  00D6	C2 93		    CLR LCD_RW
  213:	  00D8	C2 94		    CLR LCD_EN
  214:	  00DA	C2 B0		    CLR LCD_DATA
  215:
  216:	  00DC	11 24		    ACALL LCD_INIT       ; Initialize LCD
  217:
  218:				    ;send start string
  219:	  00DE	90 01 A3	    MOV DPTR,#MSG_START
  220:	  00E1	11 35		    ACALL LCD_SEND_STRING
  221:	  00E3	11 A0		    ACALL DELAY_500US
  222:	  00E5	11 3F		    ACALL LCD_CLEAR
  223:
  224:	  00E7			MAIN_TOGGLE:
  225:				    ; Send TRIG pulse
  226:	  00E7	D2 91		    SETB US_TRIG_R
  227:	  00E9	11 AA		    ACALL DELAY_10US
  228:	  00EB	C2 91		    CLR  US_TRIG_R
  229:
  230:	  00ED			WAIT_ECHO_HIGH: ; also this was JB and that was waiting for echo low which doesnt make any sense
  231:	  00ED	30 90 FD	    JNB   US_ECHO_R, WAIT_ECHO_HIGH
  232:	  00F0	C2 8D		    CLR  TF0
  233:	  00F2	C2 8C		    CLR  TR0
  234:
  235:				    ; Start Timer0
  236:	  00F4	D2 8C		    SETB TR0
  237:
  238:
  239:	  00F6			WAIT_RISE:
  240:	  00F6	20 90 0E	    JB   US_ECHO_R, GOT_ECHO
  241:	  00F9	D8 FB		    DJNZ  R0, WAIT_RISE
  242:	  00FB	D9 F9		    DJNZ  R1, WAIT_RISE
  243:	  00FD	80 02		    SJMP  NO_ECHO
  244:
  245:	  00FF	C2 93		CLR LED_OUT
  246:
  247:	  0101			NO_ECHO:
  248:	  0101	C2 8C		    CLR TR0
  249:	  0103	D2 93		    SETB LED_OUT
  250:	  0105	80 E0		    SJMP MAIN_TOGGLE
  251:
  252:	  0107			GOT_ECHO:
  253:				;i can belive this fixed everything
  254:	  0107			WAIT_ECHO_LOW:
  255:	  0107	20 90 FD	    JB   US_ECHO_R, WAIT_ECHO_LOW
  256:	  010A	C2 8D		    CLR  TF0
  257:	  010C	C2 8C		    CLR  TR0
  258:
  259:				    ; Calculate pulse duration
  260:	  010E	E5 8A		    MOV A, TL0       ; Store TL0 in R0
  261:	  0110	F8		    MOV R0, A
  262:	  0111	E5 8C		    MOV A, TH0       ; Store TH0 in R1
  263:	  0113	F9		    MOV R1, A
  264:
  265:				    ; Use DPH:DPL = R1:R0 to load 16-bit value
  266:	  0114	88 82		    MOV DPL, R0

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  267:	  0116	89 83		    MOV DPH, R1
  268:
  269:				    ; Approximate Distance = timer / 53
  270:				    ; Result will be in R7
  271:	  0118	7F 00		    MOV R7, #0        ; Distance result = 0
  272:
  273:	  011A			DIV_LOOP:
  274:	  011A	C3		    CLR C
  275:	  011B	E5 82		    MOV A, DPL
  276:	  011D	94 35		    SUBB A, #53
  277:	  011F	F5 82		    MOV DPL, A
  278:	  0121	E5 83		    MOV A, DPH
  279:	  0123	94 00		    SUBB A, #00
  280:	  0125	F5 83		    MOV DPH, A
  281:	  0127	40 03		    JC DIV_DONE       ; Stop if DPH:DPL < 53
  282:	  0129	0F		    INC R7
  283:	  012A	80 EE		    SJMP DIV_LOOP
  284:
  285:	  012C			DIV_DONE:
  286:				    ; ----- Clear all LEDs (P2.0 to P2.7) -----
  287:	  012C	75 A0 00	    MOV P2,#0h
  288:
  289:				    ; ----- Light LEDs based on distance in R2 -----
  290:	  012F	EF		    MOV A, R7
  291:
  292:	  0130	B4 14 02	    CJNE A, #20, CHECK_40
  293:	  0133	D2 A2		    SETB LED0
  294:
  295:	  0135			CHECK_40:
  296:	  0135	40 2F		    JC DONE_LEDS       ; A < 40
  297:	  0137	D2 A2		    SETB LED0
  298:	  0139	B4 28 02	    CJNE A, #40, CHECK_60
  299:
  300:	  013C	D2 A3		    SETB LED1
  301:
  302:	  013E			CHECK_60:
  303:	  013E	40 26		    JC DONE_LEDS
  304:	  0140	D2 A3		    SETB LED1
  305:	  0142	B4 3C 02	    CJNE A, #60, CHECK_75
  306:	  0145	D2 A4		    SETB LED2
  307:
  308:	  0147			CHECK_75:
  309:	  0147	40 1D		    JC DONE_LEDS
  310:	  0149	D2 A4		    SETB LED2
  311:	  014B	B4 4B 02	    CJNE A, #75, CHECK_90
  312:	  014E	D2 A5		    SETB LED3
  313:
  314:	  0150			CHECK_90:
  315:	  0150	40 14		    JC DONE_LEDS
  316:	  0152	D2 A5		    SETB LED3
  317:	  0154	B4 5A 02	    CJNE A, #90, CHECK_100
  318:	  0157	D2 A6		    SETB LED4
  319:
  320:	  0159			CHECK_100:
  321:	  0159	40 0B		    JC DONE_LEDS
  322:	  015B	D2 A6		    SETB LED4

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



 Line  I  Addr  Code            Source

  323:	  015D	B4 64 02	    CJNE A, #100, CHECK_140
  324:	  0160	D2 A7		    SETB LED5
  325:
  326:	  0162			CHECK_140:
  327:	  0162	40 15		    JC LCD_LOGIC
  328:	  0164	D2 A7		    SETB LED5
  329:
  330:	  0166			DONE_LEDS:
  331:				    ; --- Buzzer Control ---
  332:	  0166	B2 97		    CPL BUZZ               ; Toggle buzzer state
  333:	  0168	EF		    MOV A, R7             ; Get distance value
  334:	  0169	FD		    MOV R5, A             ; Store distance in R5 for delay calculation
  335:
  336:				    ; Check BUZZ bit state and set delay accordingly
  337:	  016A	30 97 04	    JNB BUZZ, LONG_DELAY  ; If BUZZ is 0, use longer delay
  338:	  016D	7C 14		    MOV R4, #20            ; Short delay when BUZZ=1
  339:	  016F	80 02		    SJMP BUZZ_DELAY
  340:	  0171			LONG_DELAY:
  341:	  0171	7C 64		    MOV R4, #100         ; Long delay when BUZZ=0
  342:
  343:	  0173			BUZZ_DELAY:
  344:	  0173	EC		    MOV A, R4           ; Load delay count
  345:	  0174	FB		    MOV R3, A           ; Load delay count
  346:	  0175			BUZZ_INNER_LOOP:
  347:	  0175	DB FE		    DJNZ R3, BUZZ_INNER_LOOP
  348:	  0177	DD FA		    DJNZ R5, BUZZ_DELAY  ; Repeat based on distance
  349:
  350:	  0179			LCD_LOGIC:
  351:	  0179	D2 97		    SETB BUZZ
  352:				    ; Continue with LCD display
  353:	  017B	90 01 9F	    MOV DPTR, #MSG_PULSE
  354:	  017E	11 35		    ACALL LCD_SEND_STRING
  355:	  0180	E5 8C		    MOV A,TH0
  356:	  0182	11 73		    ACALL LCD_SEND_HEX
  357:	  0184	E5 8A		    MOV A,TL0
  358:	  0186	11 73		    ACALL LCD_SEND_HEX
  359:
  360:				    ; ---- move cursor to start of line 2 ------------------
  361:	  0188	74 C0		    MOV  A,#0C0h              ; DDRAM addr 40 → line 2, col 0
  362:	  018A	11 0C		    ACALL LCD_CMD
  363:
  364:				    ; Display Distance (in cm)
  365:	  018C	90 01 B4	    MOV DPTR, #MSG_DISTANCE
  366:	  018F	11 35		    ACALL LCD_SEND_STRING
  367:	  0191	EF		    MOV A, R7
  368:	  0192	11 46		    ACALL LCD_SEND_DECIMAL
  369:
  370:				    ; Reset Timer0 for next round
  371:	  0194	75 8A 00	    MOV TL0, #00h
  372:	  0197	75 8C 00	    MOV TH0, #00h
  373:
  374:				    ;ACALL DELAY_500MS
  375:
  376:	  019A	11 3F		    ACALL LCD_CLEAR
  377:	  019C	02 00 E7	    LJMP MAIN_TOGGLE
  378:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8



 Line  I  Addr  Code            Source

  379:
  380:				;---------------------Rom Message------------------------------------
  381:	  019F	50 3A 20 00	MSG_PULSE: DB "P: ", 0
  382:	  01A3	50 72 6F 67	MSG_START: DB "Program Starting",0
	  01A7	72 61 6D 20
	  01AB	53 74 61 72
	  01AF	74 69 6E 67
	  01B3	00
  383:	  01B4	44 3A 20 00	MSG_DISTANCE: DB "D: ", 0
  384:	  01B8	30 31 32 33	HEX_TAB: DB  "0123456789ABCDEF" ; 16-byte table
	  01BC	34 35 36 37
	  01C0	38 39 41 42
	  01C4	43 44 45 46
  385:
  386:
  387:				END





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 9





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
B				  DATA	      F0
BASE_DELAY			  NUMBER    000A	  11
BUZZ				  NUMBER    0097	  10
BUZZ_DELAY			  CODE	    0173	 343
BUZZ_INNER_LOOP			  CODE	    0175	 346
CHECK_100			  CODE	    0159	 320
CHECK_140			  CODE	    0162	 326
CHECK_40			  CODE	    0135	 295
CHECK_60			  CODE	    013E	 302
CHECK_75			  CODE	    0147	 308
CHECK_90			  CODE	    0150	 314
CY				  BIT	      D7
DELAY_10US			  CODE	    00AA	 176
DELAY_500MS			  CODE	    0092	 155
DELAY_500US			  CODE	    00A0	 166
DIV_DONE			  CODE	    012C	 285
DIV_LOOP			  CODE	    011A	 273
DL1				  CODE	    0005	  38
DL2				  CODE	    0007	  39
DONE_DEC			  CODE	    0072	 126
DONE_LEDS			  CODE	    0166	 330
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
GOT_ECHO			  CODE	    0107	 252
HEX_TAB				  CODE	    01B8	 384
HEX_TO_ASCII			  CODE	    0085	 145
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INT0				  BIT	      B2
INT1				  BIT	      B3
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
L1				  CODE	    00A2	 168
L2				  CODE	    00A4	 169
L3				  CODE	    0094	 157

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 10



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
L4				  CODE	    0096	 158
L5				  CODE	    0098	 159
LCD_CLEAR			  CODE	    003F	  83
LCD_CMD				  CODE	    000C	  43
LCD_DATA			  NUMBER    00B0	  26
LCD_DATA_WRITE			  CODE	    0019	  52
LCD_DELAY			  CODE	    0003	  36
LCD_EN				  NUMBER    0094	  25
LCD_INIT			  CODE	    0024	  61
LCD_LOGIC			  CODE	    0179	 350
LCD_RS				  NUMBER    0092	  23
LCD_RW				  NUMBER    0093	  24
LCD_SEND_DECIMAL		  CODE	    0046	  93
LCD_SEND_HEX			  CODE	    0073	 129
LCD_SEND_STRING			  CODE	    0035	  73
LCD_STRING_DONE			  CODE	    003E	  80
LED0				  NUMBER    00A2	  14
LED1				  NUMBER    00A3	  15
LED2				  NUMBER    00A4	  16
LED3				  NUMBER    00A5	  17
LED4				  NUMBER    00A6	  18
LED5				  NUMBER    00A7	  19
LED_OUT				  NUMBER    0093	  21
LONG_DELAY			  CODE	    0171	 340
MAIN_TOGGLE			  CODE	    00E7	 224
MSG_DISTANCE			  CODE	    01B4	 383
MSG_PULSE			  CODE	    019F	 381
MSG_START			  CODE	    01A3	 382
NO_ECHO				  CODE	    0101	 247
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PCON				  DATA	      87
PRINT_ONES			  CODE	    006D	 122
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PX0				  BIT	      B8
PX1				  BIT	      BA
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RI				  BIT	      98
RS0				  BIT	      D3
RS1				  BIT	      D4
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SINT				  CODE	    0023
SKIP_HUNDREDS			  CODE	    005B	 108
SKIP_TENS			  CODE	    0064	 115

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 11



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SP				  DATA	      81
START				  CODE	    00B5	 191
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TXD				  BIT	      B1
US_ECHO_R			  NUMBER    0090	   9
US_TRIG_R			  NUMBER    0091	   8
VIBE				  NUMBER    00A1	  13
WAIT_ECHO_HIGH			  CODE	    00ED	 230
WAIT_ECHO_LOW			  CODE	    0107	 254
WAIT_RISE			  CODE	    00F6	 239
WR				  BIT	      B6
