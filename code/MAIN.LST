
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	.\main.asm
	Object File:	.\main.hex
	List File:	.\main.lst



 Line  I  Addr  Code            Source

    1:				;----------------------------------------------------------
    2:				; Project: Ultrasonic Echo Timer Measurement
    3:				; Clock  : 11.0592 MHz
    4:				; Output : LCD Screen and Led Display
    5:				;----------------------------------------------------------
    6:
    7:		B      0091	US_TRIG_R   EQU  P1.1    ; Right Trigger pin
    8:		B      0090	US_ECHO_R   EQU  P1.0    ; Right Echo pin
    9:
   10:		B      00A0	LED0 EQU P2.0; 10cm ; LEDS Output Display
   11:		B      00A1	LED1 EQU P2.1; 20cm
   12:		B      00A2	LED2 EQU P2.2; 30cm
   13:		B      00A3	LED3 EQU P2.3; 40cm
   14:		B      00A4	LED4 EQU P2.4; 50cm
   15:		B      00A5	LED5 EQU P2.5; 60cm
   16:		B      00A6	LED6 EQU P2.6; 70cm
   17:		B      00A7	LED7 EQU P2.7; >70cm
   18:
   19:		B      0093	LED_OUT EQU P1.3 ;Out of Range LED
   20:
   21:				;LCD Control Pins and Data Port
   22:		B      0095	LCD_RS      EQU  P1.5
   23:		B      0096	LCD_RW      EQU  P1.6
   24:		B      0097	LCD_EN      EQU  P1.7
   25:		D      00B0	LCD_DATA    EQU  P3
   26:
   27:				$INCLUDE (delay.inc);include the SUB_ROUTINES
   28: 1  0000			DELAY_10US:
   29: 1  0000	00		    NOP
   30: 1  0001	00		    NOP
   31: 1  0002	00		    NOP
   32: 1  0003	00		    NOP
   33: 1  0004	00		    NOP
   34: 1  0005	00		    NOP
   35: 1  0006	00		    NOP
   36: 1  0007	00		    NOP
   37: 1  0008	00		    NOP
   38: 1  0009	00		    NOP
   39: 1  000A	22		    RET
   40: 1
   41: 1
   42: 1  000B			DELAY_500US:
   43: 1  000B	7A 05		    MOV R2, #5

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44: 1  000D	7B 28		    L1: MOV R3, #40
   45: 1  000F	00		    L2: NOP
   46: 1  0010	DB FD		    DJNZ R3, L2
   47: 1  0012	DA F9		    DJNZ R2, L1
   48: 1  0014	22		    RET
   49:				$INCLUDE (uslogic.inc)
   50: 1			PUBLIC WAIT_ECHO_HIGH
				       ^
			  @@@@@ illegal statement syntax @@@@@

   51: 1			PUBLIC WAIT_RISE
				       ^
			  @@@@@ illegal statement syntax @@@@@

   52: 1			PUBLIC WAIT_ECHO_LOW
				       ^
			  @@@@@ illegal statement syntax @@@@@

   53: 1
   54: 1  0015			WAIT_ECHO_HIGH:
   55: 1  0015	30 90 FD	    JNB   US_ECHO_R, WAIT_ECHO_HIGH
   56: 1  0018	C2 8D		    CLR  TF0
   57: 1  001A	C2 8C		    CLR  TR0
   58: 1
   59: 1			    ; Start Timer0
   60: 1  001C	D2 8C		    SETB TR0
   61: 1
   62: 1
   63: 1  001E			WAIT_RISE:
   64: 1  001E	20 90 27	    JB   US_ECHO_R, GOT_ECHO
   65: 1  0021	D8 FB		    DJNZ  R0, WAIT_RISE
   66: 1  0023	D9 F9		    DJNZ  R1, WAIT_RISE
   67: 1
   68: 1  0025			WAIT_ECHO_LOW:
   69: 1  0025	20 90 FD	        JB   US_ECHO_R, WAIT_ECHO_LOW
   70: 1  0028	C2 8D		        CLR  TF0
   71: 1  002A	C2 8C		        CLR  TR0
   72:				$INCLUDE (LCD.inc)
   73: 1			PUBLIC LCD_INIT
				       ^
			  @@@@@ illegal statement syntax @@@@@

   74: 1			PUBLIC LCD_SEND_STRING
				       ^
			  @@@@@ illegal statement syntax @@@@@

   75: 1			PUBLIC LCD_SEND_DECIMAL
				       ^
			  @@@@@ illegal statement syntax @@@@@

   76: 1			PUBLIC LCD_SEND_HEX
				       ^
			  @@@@@ illegal statement syntax @@@@@

   77: 1
   78: 1

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

   79: 1			;=======================
   80: 1			; LCD SUB_ROUTINES
   81: 1			;=======================
   82: 1
   83: 1  002C			LCD_DELAY:
   84: 1  002C	79 FF		    MOV R1, #255
   85: 1  002E	7A FF		DL1: MOV R2, #255
   86: 1  0030	DA FE		DL2: DJNZ R2, DL2
   87: 1  0032	D9 FA		     DJNZ R1, DL1
   88: 1  0034	22		     RET
   89: 1
   90: 1  0035			LCD_CMD: ; to send LCD commands
   91: 1  0035	C2 95		    CLR LCD_RS
   92: 1  0037	C2 96		    CLR LCD_RW
   93: 1  0039	D2 97		    SETB LCD_EN
   94: 1  003B	F5 B0		    MOV LCD_DATA, A
   95: 1  003D	11 2C		    ACALL LCD_DELAY
   96: 1  003F	C2 97		    CLR LCD_EN
   97: 1  0041	22		    RET
   98: 1
   99: 1  0042			LCD_DATA_WRITE:
  100: 1  0042	D2 95		    SETB LCD_RS
  101: 1  0044	C2 96		    CLR LCD_RW
  102: 1  0046	D2 97		    SETB LCD_EN
  103: 1  0048	F5 B0		    MOV LCD_DATA, A
  104: 1  004A	C2 97		    CLR LCD_EN
  105: 1  004C	22		    RET
  106: 1
  107: 1  004D			LCD_INIT:
  108: 1  004D	74 38		    MOV A, #38H     ; 8-bit, 2-line
  109: 1  004F	11 35		    ACALL LCD_CMD
  110: 1  0051	74 0E		    MOV A, #0EH     ; Display ON, Cursor ON
  111: 1  0053	11 35		    ACALL LCD_CMD
  112: 1  0055	74 01		    MOV A, #01H     ; Clear display
  113: 1  0057	11 35		    ACALL LCD_CMD
  114: 1  0059	74 06		    MOV A, #06H     ; Entry mode
  115: 1  005B	11 35		    ACALL LCD_CMD
  116: 1  005D	22		    RET
  117: 1
  118: 1			; )NOTE: must move value you wish to print into register DPTR)
  119: 1  005E			LCD_SEND_STRING:
  120: 1  005E	E4		    CLR A
  121: 1  005F	93		    MOVC A, @A+DPTR
  122: 1  0060	60 05		    JZ LCD_STRING_DONE
  123: 1  0062	11 42		    ACALL LCD_DATA_WRITE
  124: 1  0064	A3		    INC DPTR
  125: 1  0065	80 F7		    SJMP LCD_SEND_STRING
  126: 1  0067			LCD_STRING_DONE:
  127: 1  0067	22		    RET
  128: 1
  129: 1  0068			LCD_CLEAR:
  130: 1  0068	74 01		    MOV   A,#01h             ; Clear-Display command
  131: 1  006A	11 35		    ACALL LCD_CMD            ; sends it
  132: 1  006C	11 2C		    ACALL LCD_DELAY          ; yields plenty of time (> 1.6 ms)
  133: 1  006E	22		    RET
  134: 1

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  135: 1			;----------------------------------------------------------
  136: 1			;  LCD_SEND_DECIMAL  – prints an 8-bit value in A (0-255)
  137: 1			; )NOTE: must move value you wish to print into register A)
  138: 1			;----------------------------------------------------------
  139: 1  006F			LCD_SEND_DECIMAL:
  140: 1  006F	75 F0 64	    MOV     B,#100          ; 1)  hundreds
  141: 1  0072	84		    DIV     AB              ;    A = hundreds, B = 0-99 remainder
  142: 1  0073	FC		    MOV     R4,A            ;    save hundreds
  143: 1  0074	E5 F0		    MOV     A,B             ; 2)  tens / ones
  144: 1  0076	75 F0 0A	    MOV     B,#10
  145: 1  0079	84		    DIV     AB              ;    A = tens, B = ones
  146: 1  007A	FD		    MOV     R5,A
  147: 1  007B	AE F0		    MOV     R6,B
  148: 1
  149: 1			    ; -------- print hundreds if non-zero ---------------
  150: 1  007D	EC		    MOV     A,R4
  151: 1  007E	60 04		    JZ      SKIP_HUNDREDS
  152: 1  0080	24 30		    ADD     A,#'0'
  153: 1  0082	11 42		    ACALL   LCD_DATA_WRITE
  154: 1  0084			SKIP_HUNDREDS:
  155: 1			    ; -------- print tens (always if hundreds shown) ----
  156: 1  0084	ED		    MOV     A,R5
  157: 1  0085	60 06		    JZ      SKIP_TENS
  158: 1  0087	24 30		    ADD     A,#'0'
  159: 1  0089	11 42		    ACALL   LCD_DATA_WRITE
  160: 1  008B	80 09		    SJMP    PRINT_ONES
  161: 1  008D			SKIP_TENS:
  162: 1			    ; if both hundreds and tens were zero, we still need one ‘0’
  163: 1  008D	EC		    MOV     A,R4
  164: 1  008E	70 06		    JNZ     PRINT_ONES      ; already printed a hundreds digit
  165: 1  0090	74 30		    MOV     A,#'0'          ; value was 0-9, so show a single 0
  166: 1  0092	11 42		    ACALL   LCD_DATA_WRITE
  167: 1  0094	80 05		    SJMP    DONE_DEC
  168: 1  0096			PRINT_ONES:
  169: 1  0096	EE		    MOV     A,R6
  170: 1  0097	24 30		    ADD     A,#'0'
  171: 1  0099	11 42		    ACALL   LCD_DATA_WRITE
  172: 1  009B			DONE_DEC:
  173: 1  009B	22		    RET
  174: 1
  175: 1  009C			LCD_SEND_HEX:      ;send values to R6 first
  176: 1  009C	F5 F0		    MOV B, A
  177: 1  009E	C4		    SWAP A
  178: 1  009F	54 0F		    ANL A, #0Fh
  179: 1  00A1	11 AE		    ACALL HEX_TO_ASCII
  180: 1  00A3	11 42		    ACALL LCD_DATA_WRITE
  181: 1
  182: 1  00A5	E5 F0		    MOV A, B
  183: 1  00A7	54 0F		    ANL A, #0Fh
  184: 1  00A9	11 AE		    ACALL HEX_TO_ASCII
  185: 1  00AB	11 42		    ACALL LCD_DATA_WRITE
  186: 1  00AD	22		    RET
  187: 1
  188: 1			;----------------------------------------------------------
  189: 1			;  HEX_TO_ASCII  – expects 0-15 in A, returns ‘0’…‘F’ in A (uses a ROM look-up so it’s
       1			 always right)

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  190: 1			;----------------------------------------------------------
  191: 1  00AE			HEX_TO_ASCII:
  192: 1  00AE	C0 82		    PUSH    DPL             ; keep caller’s DPTR safe
  193: 1  00B0	C0 83		    PUSH    DPH
  194: 1  00B2	90 00 EE	    MOV     DPTR,#HEX_TAB   ; point to table
  195: 1  00B5	93		    MOVC    A,@A+DPTR       ; fetch the correct character
  196: 1  00B6	D0 83		    POP     DPH
  197: 1  00B8	D0 82		    POP     DPL
  198: 1  00BA	22		    RET
  199:
  200:		N      0000	ORG 0000h
  201:	  0000	02 00 03	LJMP START
  202:
  203:	  0003			START:
  204:	  0003	75 89 01	    MOV TMOD, #01H      ;Timer0 Mode 1(16 bit) TL & TH
  205:	  0006	C2 8C		    CLR TR0             ; Ensure Timer0 OFF
  206:
  207:	  0008	75 8A 00	    MOV TL0, #00h 		; Reset Timer0 for next round
  208:	  000B	75 8C 00	    MOV TH0, #00h
  209:
  210:	  000E	C2 A0		    CLR LED0 			; make sure all pins are ready
  211:	  0010	C2 A1		    CLR LED1
  212:	  0012	C2 A2		    CLR LED2
  213:	  0014	C2 A3		    CLR LED3
  214:	  0016	C2 A4		    CLR LED4
  215:	  0018	C2 A5		    CLR LED5
  216:	  001A	C2 A6		    CLR LED6
  217:	  001C	C2 A7		    CLR LED7
  218:	  001E	C2 91		    CLR US_TRIG_R
  219:	  0020	C2 90		    CLR US_ECHO_R
  220:	  0022	C2 95		    CLR LCD_RS
  221:	  0024	C2 96		    CLR LCD_RW
  222:	  0026	C2 97		    CLR LCD_EN
  223:	  0028	75 B0 00	    MOV LCD_DATA,#00h
  224:
  225:	  002B	11 4D		     ACALL LCD_INIT     ; Initialize LCD
  226:
  227:				    ;send start string
  228:	  002D	90 00 D2	    MOV DPTR,#MSG_START
  229:	  0030	11 5E		    ACALL LCD_SEND_STRING
  230:	  0032	11 0B		    ACALL DELAY_500US
  231:	  0034	11 68		    ACALL LCD_CLEAR
  232:
  233:	  0036			MAIN_TOGGLE:
  234:				    ; Send TRIG pulse
  235:	  0036	D2 91		    SETB US_TRIG_R
  236:	  0038	11 00		    ACALL DELAY_10US
  237:	  003A	C2 91		    CLR  US_TRIG_R
  238:
  239:	  003C	11 15		ACALL WAIT_ECHO_HIGH
  240:	  003E	11 1E		ACALL WAIT_RISE
  241:
  242:	  0040	C2 93		CLR LED_OUT
  243:
  244:	  0042			NO_ECHO:
  245:	  0042	C2 8C		    CLR TR0

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  246:	  0044	D2 93		    SETB LED_OUT
  247:	  0046	80 EE		    SJMP MAIN_TOGGLE
  248:
  249:	  0048			GOT_ECHO:
  250:	  0048	11 25		    ACALL WAIT_ECHO_LOW
  251:				    ; Reset Timer0 for next round
  252:				    ; -----------------------------
  253:				    ; Print "Pulse: " and Timer0
  254:				    ; -----------------------------
  255:	  004A	90 00 CA	    MOV DPTR, #MSG_PULSE
  256:	  004D	11 5E		    ACALL LCD_SEND_STRING
  257:	  004F	E5 8C		    MOV A,TH0
  258:	  0051	11 9C		    ACALL LCD_SEND_HEX
  259:	  0053	E5 8A		    MOV A,TL0
  260:	  0055	11 9C		    ACALL LCD_SEND_HEX
  261:
  262:				        ; Calculate pulse duration
  263:	  0057	E5 8A		    MOV A, TL0       ; Store TL0 in R0
  264:	  0059	F8		    MOV R0, A
  265:	  005A	E5 8C		    MOV A, TH0       ; Store TH0 in R1
  266:	  005C	F9		    MOV R1, A
  267:
  268:				    ; Use DPH:DPL = R1:R0 to load 16-bit value
  269:	  005D	88 82		    MOV DPL, R0
  270:	  005F	89 83		    MOV DPH, R1
  271:
  272:				    ; Approximate Distance = timer / 53
  273:				    ; Result will be in R7
  274:	  0061	7F 00		    MOV R7, #0        ; Distance result = 0
  275:
  276:	  0063			DIV_LOOP:
  277:	  0063	C3		    CLR C
  278:	  0064	E5 82		    MOV A, DPL
  279:	  0066	94 35		    SUBB A, #53
  280:	  0068	F5 82		    MOV DPL, A
  281:	  006A	E5 83		    MOV A, DPH
  282:	  006C	94 00		    SUBB A, #00
  283:	  006E	F5 83		    MOV DPH, A
  284:	  0070	40 03		    JC DIV_DONE       ; Stop if DPH:DPL < 53
  285:	  0072	0F		    INC R7
  286:	  0073	80 EE		    SJMP DIV_LOOP
  287:
  288:	  0075			DIV_DONE:
  289:				    ; ---- move cursor to start of line 2 ------------------
  290:	  0075	74 C0		    MOV  A,#0C0h              ; DDRAM addr 40 → line 2, col 0
  291:	  0077	11 35		    ACALL LCD_CMD
  292:
  293:				    ; Display Distance (in cm)
  294:	  0079	90 00 E3	    MOV DPTR, #MSG_DISTANCE
  295:	  007C	11 5E		    ACALL LCD_SEND_STRING
  296:	  007E	EF		    MOV A, R7
  297:	  007F	11 6F		    ACALL LCD_SEND_DECIMAL
  298:
  299:				        ; ----- Clear all LEDs (P2.0 to P2.7) -----
  300:	  0081	75 A0 00	    MOV P2,#0h
  301:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



 Line  I  Addr  Code            Source

  302:				    ; ----- Light LEDs based on distance in R2 -----
  303:	  0084	EF		    MOV A, R7
  304:
  305:	  0085	B4 0A 02	    CJNE A, #10, CHECK_20
  306:	  0088	D2 A0		    SETB LED0
  307:
  308:	  008A			CHECK_20:
  309:	  008A	40 33		    JC DONE_LEDS       ; A < 10
  310:	  008C	D2 A0		    SETB LED0
  311:	  008E	B4 14 02	    CJNE A, #20, CHECK_30
  312:	  0091	D2 A1		    SETB LED1
  313:
  314:	  0093			CHECK_30:
  315:	  0093	40 2A		    JC DONE_LEDS
  316:	  0095	D2 A1		    SETB LED1
  317:	  0097	B4 1E 02	    CJNE A, #30, CHECK_40
  318:	  009A	D2 A2		    SETB LED2
  319:
  320:	  009C			CHECK_40:
  321:	  009C	40 21		    JC DONE_LEDS
  322:	  009E	D2 A2		    SETB LED2
  323:	  00A0	B4 28 02	    CJNE A, #40, CHECK_50
  324:	  00A3	D2 A3		    SETB LED3
  325:
  326:	  00A5			CHECK_50:
  327:	  00A5	40 18		    JC DONE_LEDS
  328:	  00A7	D2 A3		    SETB LED3
  329:	  00A9	B4 32 02	    CJNE A, #50, CHECK_60
  330:	  00AC	D2 A4		    SETB LED4
  331:
  332:	  00AE			CHECK_60:
  333:	  00AE	40 0F		    JC DONE_LEDS
  334:	  00B0	D2 A4		    SETB LED4
  335:	  00B2	B4 3C 02	    CJNE A, #60, CHECK_70
  336:	  00B5	D2 A5		    SETB LED5
  337:
  338:	  00B7			CHECK_70:
  339:	  00B7	40 06		    JC DONE_LEDS
  340:	  00B9	D2 A5		    SETB LED5
  341:	  00BB	D2 A6		    SETB LED6
  342:	  00BD	D2 A7		    SETB LED7           ; Everything beyond 70 cm → all LEDs ON
  343:
  344:	  00BF			DONE_LEDS:
  345:
  346:				    ; Reset Timer0 for next round
  347:	  00BF	75 8A 00	    MOV TL0, #00h
  348:	  00C2	75 8C 00	    MOV TH0, #00h
  349:
  350:	  00C5	11 68		    ACALL LCD_CLEAR
  351:	  00C7	02 00 36	    LJMP MAIN_TOGGLE
  352:				;---------------------Rom Message------------------------------------
  353:	  00CA	50 75 6C 73	MSG_PULSE: DB "Pulse: ", 0
	  00CE	65 3A 20 00
  354:	  00D2	50 72 6F 67	MSG_START: DB "Program Starting",0
	  00D6	72 61 6D 20
	  00DA	53 74 61 72

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8



 Line  I  Addr  Code            Source

	  00DE	74 69 6E 67
	  00E2	00
  355:	  00E3	44 69 73 74	MSG_DISTANCE: DB "Distance: ", 0
	  00E7	61 6E 63 65
	  00EB	3A 20 00
  356:	  00EE	30 31 32 33	HEX_TAB: DB  "0123456789ABCDEF" ; 16-byte table
	  00F2	34 35 36 37
	  00F6	38 39 41 42
	  00FA	43 44 45 46
  357:				END





                     register banks used:  ---

                     7 errors detected




ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 9





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
B				  DATA	      F0
CHECK_20			  CODE	    008A	 308
CHECK_30			  CODE	    0093	 314
CHECK_40			  CODE	    009C	 320
CHECK_50			  CODE	    00A5	 326
CHECK_60			  CODE	    00AE	 332
CHECK_70			  CODE	    00B7	 338
CY				  BIT	      D7
DELAY_10US			  CODE	    0000	  28
DELAY_500US			  CODE	    000B	  42
DIV_DONE			  CODE	    0075	 288
DIV_LOOP			  CODE	    0063	 276
DL1				  CODE	    002E	  85
DL2				  CODE	    0030	  86
DONE_DEC			  CODE	    009B	 172
DONE_LEDS			  CODE	    00BF	 344
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
GOT_ECHO			  CODE	    0048	 249
HEX_TAB				  CODE	    00EE	 356
HEX_TO_ASCII			  CODE	    00AE	 191
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INT0				  BIT	      B2
INT1				  BIT	      B3
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
L1				  CODE	    000D	  44
L2				  CODE	    000F	  45
LCD_CLEAR			  CODE	    0068	 129
LCD_CMD				  CODE	    0035	  90
LCD_DATA			  NUMBER    00B0	  25
LCD_DATA_WRITE			  CODE	    0042	  99
LCD_DELAY			  CODE	    002C	  83
LCD_EN				  NUMBER    0097	  24

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 10



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
LCD_INIT			  CODE	    004D	 107
LCD_RS				  NUMBER    0095	  22
LCD_RW				  NUMBER    0096	  23
LCD_SEND_DECIMAL		  CODE	    006F	 139
LCD_SEND_HEX			  CODE	    009C	 175
LCD_SEND_STRING			  CODE	    005E	 119
LCD_STRING_DONE			  CODE	    0067	 126
LED0				  NUMBER    00A0	  10
LED1				  NUMBER    00A1	  11
LED2				  NUMBER    00A2	  12
LED3				  NUMBER    00A3	  13
LED4				  NUMBER    00A4	  14
LED5				  NUMBER    00A5	  15
LED6				  NUMBER    00A6	  16
LED7				  NUMBER    00A7	  17
LED_OUT				  NUMBER    0093	  19
MAIN_TOGGLE			  CODE	    0036	 233
MSG_DISTANCE			  CODE	    00E3	 355
MSG_PULSE			  CODE	    00CA	 353
MSG_START			  CODE	    00D2	 354
NO_ECHO				  CODE	    0042	 244
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PCON				  DATA	      87
PRINT_ONES			  CODE	    0096	 168
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PX0				  BIT	      B8
PX1				  BIT	      BA
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RI				  BIT	      98
RS0				  BIT	      D3
RS1				  BIT	      D4
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SINT				  CODE	    0023
SKIP_HUNDREDS			  CODE	    0084	 154
SKIP_TENS			  CODE	    008D	 161
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SP				  DATA	      81
START				  CODE	    0003	 203
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 11



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
TCON				  DATA	      88
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TXD				  BIT	      B1
US_ECHO_R			  NUMBER    0090	   8
US_TRIG_R			  NUMBER    0091	   7
WAIT_ECHO_HIGH			  CODE	    0015	  54
WAIT_ECHO_LOW			  CODE	    0025	  68
WAIT_RISE			  CODE	    001E	  63
WR				  BIT	      B6
