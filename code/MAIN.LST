
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	..\main.asm
	Object File:	..\main.hex
	List File:	..\main.lst



 Line  I  Addr  Code            Source

    1:				;----------------------------------------------------------
    2:				; Project: Ultrasonic Echo Timer Measurement
    3:				; Clock  : 11.0592 MHz
    4:				; Output : LCD Screen and Led Display
    5:				;----------------------------------------------------------
    6:
    7:		B      0091	US_TRIG_R   EQU  P1.1    ; Right Trigger pin
    8:		B      0090	US_ECHO_R   EQU  P1.0    ; Right Echo pin
    9:
   10:		B      00A0	LED0 EQU P2.0; 10cm ; LEDS Output Display
   11:		B      00A1	LED1 EQU P2.1; 20cm
   12:		B      00A2	LED2 EQU P2.2; 30cm
   13:		B      00A3	LED3 EQU P2.3; 40cm
   14:		B      00A4	LED4 EQU P2.4; 50cm
   15:		B      00A5	LED5 EQU P2.5; 60cm
   16:		B      00A6	LED6 EQU P2.6; 70cm
   17:		B      00A7	LED7 EQU P2.7; >70cm
   18:
   19:		B      0093	LED_OUT EQU P1.3 ;Out of Range LED
   20:
   21:				;LCD Control Pins and Data Port
   22:		B      0095	LCD_RS      EQU  P1.5
   23:		B      0096	LCD_RW      EQU  P1.6
   24:		B      0097	LCD_EN      EQU  P1.7
   25:		D      00B0	LCD_DATA    EQU  P3
   26:
   27:				$INCLUDE (delay.inc);include the SUB_ROUTINES
   28: 1  0000			DELAY_10US:
   29: 1  0000	00		    NOP
   30: 1  0001	00		    NOP
   31: 1  0002	00		    NOP
   32: 1  0003	00		    NOP
   33: 1  0004	00		    NOP
   34: 1  0005	00		    NOP
   35: 1  0006	00		    NOP
   36: 1  0007	00		    NOP
   37: 1  0008	00		    NOP
   38: 1  0009	00		    NOP
   39: 1  000A	22		    RET
   40: 1
   41: 1
   42: 1  000B			DELAY_500US:
   43: 1  000B	7A 05		    MOV R2, #5

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44: 1  000D	7B 28		    L1: MOV R3, #40
   45: 1  000F	00		    L2: NOP
   46: 1  0010	DB FD		    DJNZ R3, L2
   47: 1  0012	DA F9		    DJNZ R2, L1
   48: 1  0014	22		    RET
   49:				$INCLUDE (uslogic.inc)
   50: 1  0015			WAIT_ECHO_HIGH:
   51: 1  0015	30 90 FD	    JNB   US_ECHO_R, WAIT_ECHO_HIGH
   52: 1  0018	C2 8D		    CLR  TF0
   53: 1  001A	C2 8C		    CLR  TR0
   54: 1
   55: 1			    ; Start Timer0
   56: 1  001C	D2 8C		    SETB TR0
   57: 1
   58: 1
   59: 1  001E			WAIT_RISE:
   60: 1  001E	20 90 27	    JB   US_ECHO_R, GOT_ECHO
   61: 1  0021	D8 FB		    DJNZ  R0, WAIT_RISE
   62: 1  0023	D9 F9		    DJNZ  R1, WAIT_RISE
   63: 1
   64: 1  0025			WAIT_ECHO_LOW:
   65: 1  0025	20 90 FD	    JB   US_ECHO_R, WAIT_ECHO_LOW
   66: 1  0028	C2 8D		    CLR  TF0
   67: 1  002A	C2 8C		    CLR  TR0
   68:				$INCLUDE (LCD.inc)
   69: 1			;=======================
   70: 1			; LCD SUB_ROUTINES
   71: 1			;=======================
   72: 1
   73: 1  002C			LCD_DELAY:
   74: 1  002C	79 FF		    MOV R1, #255
   75: 1  002E	7A FF		DL1: MOV R2, #255
   76: 1  0030	DA FE		DL2: DJNZ R2, DL2
   77: 1  0032	D9 FA		     DJNZ R1, DL1
   78: 1  0034	22		     RET
   79: 1
   80: 1  0035			LCD_CMD: ; to send LCD commands
   81: 1  0035	C2 95		    CLR LCD_RS
   82: 1  0037	C2 96		    CLR LCD_RW
   83: 1  0039	D2 97		    SETB LCD_EN
   84: 1  003B	F5 B0		    MOV LCD_DATA, A
   85: 1  003D	11 2C		    ACALL LCD_DELAY
   86: 1  003F	C2 97		    CLR LCD_EN
   87: 1  0041	22		    RET
   88: 1
   89: 1  0042			LCD_DATA_WRITE:
   90: 1  0042	D2 95		    SETB LCD_RS
   91: 1  0044	C2 96		    CLR LCD_RW
   92: 1  0046	D2 97		    SETB LCD_EN
   93: 1  0048	F5 B0		    MOV LCD_DATA, A
   94: 1  004A	C2 97		    CLR LCD_EN
   95: 1  004C	22		    RET
   96: 1
   97: 1  004D			LCD_INIT:
   98: 1  004D	74 38		    MOV A, #38H     ; 8-bit, 2-line
   99: 1  004F	11 35		    ACALL LCD_CMD

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

  100: 1  0051	74 0E		    MOV A, #0EH     ; Display ON, Cursor ON
  101: 1  0053	11 35		    ACALL LCD_CMD
  102: 1  0055	74 01		    MOV A, #01H     ; Clear display
  103: 1  0057	11 35		    ACALL LCD_CMD
  104: 1  0059	74 06		    MOV A, #06H     ; Entry mode
  105: 1  005B	11 35		    ACALL LCD_CMD
  106: 1  005D	22		    RET
  107: 1
  108: 1			; )NOTE: must move value you wish to print into register DPTR)
  109: 1  005E			LCD_SEND_STRING:
  110: 1  005E	E4		    CLR A
  111: 1  005F	93		    MOVC A, @A+DPTR
  112: 1  0060	60 05		    JZ LCD_STRING_DONE
  113: 1  0062	11 42		    ACALL LCD_DATA_WRITE
  114: 1  0064	A3		    INC DPTR
  115: 1  0065	80 F7		    SJMP LCD_SEND_STRING
  116: 1  0067			LCD_STRING_DONE:
  117: 1  0067	22		    RET
  118: 1
  119: 1  0068			LCD_CLEAR:
  120: 1  0068	74 01		    MOV   A,#01h             ; Clear-Display command
  121: 1  006A	11 35		    ACALL LCD_CMD            ; sends it
  122: 1  006C	11 2C		    ACALL LCD_DELAY          ; yields plenty of time (> 1.6 ms)
  123: 1  006E	22		    RET
  124: 1
  125: 1			;----------------------------------------------------------
  126: 1			;  LCD_SEND_DECIMAL  – prints an 8-bit value in A (0-255)
  127: 1			; )NOTE: must move value you wish to print into register A)
  128: 1			;----------------------------------------------------------
  129: 1  006F			LCD_SEND_DECIMAL:
  130: 1  006F	75 F0 64	    MOV     B,#100          ; 1)  hundreds
  131: 1  0072	84		    DIV     AB              ;    A = hundreds, B = 0-99 remainder
  132: 1  0073	FC		    MOV     R4,A            ;    save hundreds
  133: 1  0074	E5 F0		    MOV     A,B             ; 2)  tens / ones
  134: 1  0076	75 F0 0A	    MOV     B,#10
  135: 1  0079	84		    DIV     AB              ;    A = tens, B = ones
  136: 1  007A	FD		    MOV     R5,A
  137: 1  007B	AE F0		    MOV     R6,B
  138: 1
  139: 1			    ; -------- print hundreds if non-zero ---------------
  140: 1  007D	EC		    MOV     A,R4
  141: 1  007E	60 04		    JZ      SKIP_HUNDREDS
  142: 1  0080	24 30		    ADD     A,#'0'
  143: 1  0082	11 42		    ACALL   LCD_DATA_WRITE
  144: 1  0084			SKIP_HUNDREDS:
  145: 1			    ; -------- print tens (always if hundreds shown) ----
  146: 1  0084	ED		    MOV     A,R5
  147: 1  0085	60 06		    JZ      SKIP_TENS
  148: 1  0087	24 30		    ADD     A,#'0'
  149: 1  0089	11 42		    ACALL   LCD_DATA_WRITE
  150: 1  008B	80 09		    SJMP    PRINT_ONES
  151: 1  008D			SKIP_TENS:
  152: 1			    ; if both hundreds and tens were zero, we still need one ‘0’
  153: 1  008D	EC		    MOV     A,R4
  154: 1  008E	70 06		    JNZ     PRINT_ONES      ; already printed a hundreds digit
  155: 1  0090	74 30		    MOV     A,#'0'          ; value was 0-9, so show a single 0

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  156: 1  0092	11 42		    ACALL   LCD_DATA_WRITE
  157: 1  0094	80 05		    SJMP    DONE_DEC
  158: 1  0096			PRINT_ONES:
  159: 1  0096	EE		    MOV     A,R6
  160: 1  0097	24 30		    ADD     A,#'0'
  161: 1  0099	11 42		    ACALL   LCD_DATA_WRITE
  162: 1  009B			DONE_DEC:
  163: 1  009B	22		    RET
  164: 1
  165: 1  009C			LCD_SEND_HEX:      ;send values to R6 first
  166: 1  009C	F5 F0		    MOV B, A
  167: 1  009E	C4		    SWAP A
  168: 1  009F	54 0F		    ANL A, #0Fh
  169: 1  00A1	11 AE		    ACALL HEX_TO_ASCII
  170: 1  00A3	11 42		    ACALL LCD_DATA_WRITE
  171: 1
  172: 1  00A5	E5 F0		    MOV A, B
  173: 1  00A7	54 0F		    ANL A, #0Fh
  174: 1  00A9	11 AE		    ACALL HEX_TO_ASCII
  175: 1  00AB	11 42		    ACALL LCD_DATA_WRITE
  176: 1  00AD	22		    RET
  177: 1
  178: 1			;----------------------------------------------------------
  179: 1			;  HEX_TO_ASCII  – expects 0-15 in A, returns ‘0’…‘F’ in A (uses a ROM look-up so it’s
       1			 always right)
  180: 1			;----------------------------------------------------------
  181: 1  00AE			HEX_TO_ASCII:
  182: 1  00AE	C0 82		    PUSH    DPL             ; keep caller’s DPTR safe
  183: 1  00B0	C0 83		    PUSH    DPH
  184: 1  00B2	90 00 EE	    MOV     DPTR,#HEX_TAB   ; point to table
  185: 1  00B5	93		    MOVC    A,@A+DPTR       ; fetch the correct character
  186: 1  00B6	D0 83		    POP     DPH
  187: 1  00B8	D0 82		    POP     DPL
  188: 1  00BA	22		    RET
  189:
  190:		N      0000	ORG 0000h
  191:	  0000	02 00 03	LJMP START
  192:
  193:	  0003			START:
  194:	  0003	75 89 01	    MOV TMOD, #01H      ;Timer0 Mode 1(16 bit) TL & TH
  195:	  0006	C2 8C		    CLR TR0             ; Ensure Timer0 OFF
  196:
  197:	  0008	75 8A 00	    MOV TL0, #00h 		; Reset Timer0 for next round
  198:	  000B	75 8C 00	    MOV TH0, #00h
  199:
  200:	  000E	C2 A0		    CLR LED0 			; make sure all pins are ready
  201:	  0010	C2 A1		    CLR LED1
  202:	  0012	C2 A2		    CLR LED2
  203:	  0014	C2 A3		    CLR LED3
  204:	  0016	C2 A4		    CLR LED4
  205:	  0018	C2 A5		    CLR LED5
  206:	  001A	C2 A6		    CLR LED6
  207:	  001C	C2 A7		    CLR LED7
  208:	  001E	C2 91		    CLR US_TRIG_R
  209:	  0020	C2 90		    CLR US_ECHO_R
  210:	  0022	C2 95		    CLR LCD_RS

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  211:	  0024	C2 96		    CLR LCD_RW
  212:	  0026	C2 97		    CLR LCD_EN
  213:	  0028	75 B0 00	    MOV LCD_DATA,#00h
  214:
  215:	  002B	11 4D		     ACALL LCD_INIT     ; Initialize LCD
  216:
  217:				    ;send start string
  218:	  002D	90 00 D2	    MOV DPTR,#MSG_START
  219:	  0030	11 5E		    ACALL LCD_SEND_STRING
  220:	  0032	11 0B		    ACALL DELAY_500US
  221:	  0034	11 68		    ACALL LCD_CLEAR
  222:
  223:	  0036			MAIN_TOGGLE:
  224:				    ; Send TRIG pulse
  225:	  0036	D2 91		    SETB US_TRIG_R
  226:	  0038	11 00		    ACALL DELAY_10US
  227:	  003A	C2 91		    CLR  US_TRIG_R
  228:
  229:	  003C	11 15		ACALL WAIT_ECHO_HIGH
  230:	  003E	11 1E		ACALL WAIT_RISE
  231:
  232:	  0040	C2 93		CLR LED_OUT
  233:
  234:	  0042			NO_ECHO:
  235:	  0042	C2 8C		    CLR TR0
  236:	  0044	D2 93		    SETB LED_OUT
  237:	  0046	80 EE		    SJMP MAIN_TOGGLE
  238:
  239:	  0048			GOT_ECHO:
  240:	  0048	11 25		    ACALL WAIT_ECHO_LOW
  241:				    ; Reset Timer0 for next round
  242:				    ; -----------------------------
  243:				    ; Print "Pulse: " and Timer0
  244:				    ; -----------------------------
  245:	  004A	90 00 CA	    MOV DPTR, #MSG_PULSE
  246:	  004D	11 5E		    ACALL LCD_SEND_STRING
  247:	  004F	E5 8C		    MOV A,TH0
  248:	  0051	11 9C		    ACALL LCD_SEND_HEX
  249:	  0053	E5 8A		    MOV A,TL0
  250:	  0055	11 9C		    ACALL LCD_SEND_HEX
  251:
  252:				        ; Calculate pulse duration
  253:	  0057	E5 8A		    MOV A, TL0       ; Store TL0 in R0
  254:	  0059	F8		    MOV R0, A
  255:	  005A	E5 8C		    MOV A, TH0       ; Store TH0 in R1
  256:	  005C	F9		    MOV R1, A
  257:
  258:				    ; Use DPH:DPL = R1:R0 to load 16-bit value
  259:	  005D	88 82		    MOV DPL, R0
  260:	  005F	89 83		    MOV DPH, R1
  261:
  262:				    ; Approximate Distance = timer / 53
  263:				    ; Result will be in R7
  264:	  0061	7F 00		    MOV R7, #0        ; Distance result = 0
  265:
  266:	  0063			DIV_LOOP:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  267:	  0063	C3		    CLR C
  268:	  0064	E5 82		    MOV A, DPL
  269:	  0066	94 35		    SUBB A, #53
  270:	  0068	F5 82		    MOV DPL, A
  271:	  006A	E5 83		    MOV A, DPH
  272:	  006C	94 00		    SUBB A, #00
  273:	  006E	F5 83		    MOV DPH, A
  274:	  0070	40 03		    JC DIV_DONE       ; Stop if DPH:DPL < 53
  275:	  0072	0F		    INC R7
  276:	  0073	80 EE		    SJMP DIV_LOOP
  277:
  278:	  0075			DIV_DONE:
  279:				    ; ---- move cursor to start of line 2 ------------------
  280:	  0075	74 C0		    MOV  A,#0C0h              ; DDRAM addr 40 → line 2, col 0
  281:	  0077	11 35		    ACALL LCD_CMD
  282:
  283:				    ; Display Distance (in cm)
  284:	  0079	90 00 E3	    MOV DPTR, #MSG_DISTANCE
  285:	  007C	11 5E		    ACALL LCD_SEND_STRING
  286:	  007E	EF		    MOV A, R7
  287:	  007F	11 6F		    ACALL LCD_SEND_DECIMAL
  288:
  289:				        ; ----- Clear all LEDs (P2.0 to P2.7) -----
  290:	  0081	75 A0 00	    MOV P2,#0h
  291:
  292:				    ; ----- Light LEDs based on distance in R2 -----
  293:	  0084	EF		    MOV A, R7
  294:
  295:	  0085	B4 0A 02	    CJNE A, #10, CHECK_20
  296:	  0088	D2 A0		    SETB LED0
  297:
  298:	  008A			CHECK_20:
  299:	  008A	40 33		    JC DONE_LEDS       ; A < 10
  300:	  008C	D2 A0		    SETB LED0
  301:	  008E	B4 14 02	    CJNE A, #20, CHECK_30
  302:	  0091	D2 A1		    SETB LED1
  303:
  304:	  0093			CHECK_30:
  305:	  0093	40 2A		    JC DONE_LEDS
  306:	  0095	D2 A1		    SETB LED1
  307:	  0097	B4 1E 02	    CJNE A, #30, CHECK_40
  308:	  009A	D2 A2		    SETB LED2
  309:
  310:	  009C			CHECK_40:
  311:	  009C	40 21		    JC DONE_LEDS
  312:	  009E	D2 A2		    SETB LED2
  313:	  00A0	B4 28 02	    CJNE A, #40, CHECK_50
  314:	  00A3	D2 A3		    SETB LED3
  315:
  316:	  00A5			CHECK_50:
  317:	  00A5	40 18		    JC DONE_LEDS
  318:	  00A7	D2 A3		    SETB LED3
  319:	  00A9	B4 32 02	    CJNE A, #50, CHECK_60
  320:	  00AC	D2 A4		    SETB LED4
  321:
  322:	  00AE			CHECK_60:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



 Line  I  Addr  Code            Source

  323:	  00AE	40 0F		    JC DONE_LEDS
  324:	  00B0	D2 A4		    SETB LED4
  325:	  00B2	B4 3C 02	    CJNE A, #60, CHECK_70
  326:	  00B5	D2 A5		    SETB LED5
  327:
  328:	  00B7			CHECK_70:
  329:	  00B7	40 06		    JC DONE_LEDS
  330:	  00B9	D2 A5		    SETB LED5
  331:	  00BB	D2 A6		    SETB LED6
  332:	  00BD	D2 A7		    SETB LED7           ; Everything beyond 70 cm → all LEDs ON
  333:
  334:	  00BF			DONE_LEDS:
  335:
  336:				    ; Reset Timer0 for next round
  337:	  00BF	75 8A 00	    MOV TL0, #00h
  338:	  00C2	75 8C 00	    MOV TH0, #00h
  339:
  340:	  00C5	11 68		    ACALL LCD_CLEAR
  341:	  00C7	02 00 36	    LJMP MAIN_TOGGLE
  342:				;---------------------Rom Message------------------------------------
  343:	  00CA	50 75 6C 73	MSG_PULSE: DB "Pulse: ", 0
	  00CE	65 3A 20 00
  344:	  00D2	50 72 6F 67	MSG_START: DB "Program Starting",0
	  00D6	72 61 6D 20
	  00DA	53 74 61 72
	  00DE	74 69 6E 67
	  00E2	00
  345:	  00E3	44 69 73 74	MSG_DISTANCE: DB "Distance: ", 0
	  00E7	61 6E 63 65
	  00EB	3A 20 00
  346:	  00EE	30 31 32 33	HEX_TAB: DB  "0123456789ABCDEF" ; 16-byte table
	  00F2	34 35 36 37
	  00F6	38 39 41 42
	  00FA	43 44 45 46
  347:				END





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
B				  DATA	      F0
CHECK_20			  CODE	    008A	 298
CHECK_30			  CODE	    0093	 304
CHECK_40			  CODE	    009C	 310
CHECK_50			  CODE	    00A5	 316
CHECK_60			  CODE	    00AE	 322
CHECK_70			  CODE	    00B7	 328
CY				  BIT	      D7
DELAY_10US			  CODE	    0000	  28
DELAY_500US			  CODE	    000B	  42
DIV_DONE			  CODE	    0075	 278
DIV_LOOP			  CODE	    0063	 266
DL1				  CODE	    002E	  75
DL2				  CODE	    0030	  76
DONE_DEC			  CODE	    009B	 162
DONE_LEDS			  CODE	    00BF	 334
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
GOT_ECHO			  CODE	    0048	 239
HEX_TAB				  CODE	    00EE	 346
HEX_TO_ASCII			  CODE	    00AE	 181
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INT0				  BIT	      B2
INT1				  BIT	      B3
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
L1				  CODE	    000D	  44
L2				  CODE	    000F	  45
LCD_CLEAR			  CODE	    0068	 119
LCD_CMD				  CODE	    0035	  80
LCD_DATA			  NUMBER    00B0	  25
LCD_DATA_WRITE			  CODE	    0042	  89
LCD_DELAY			  CODE	    002C	  73
LCD_EN				  NUMBER    0097	  24

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 9



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
LCD_INIT			  CODE	    004D	  97
LCD_RS				  NUMBER    0095	  22
LCD_RW				  NUMBER    0096	  23
LCD_SEND_DECIMAL		  CODE	    006F	 129
LCD_SEND_HEX			  CODE	    009C	 165
LCD_SEND_STRING			  CODE	    005E	 109
LCD_STRING_DONE			  CODE	    0067	 116
LED0				  NUMBER    00A0	  10
LED1				  NUMBER    00A1	  11
LED2				  NUMBER    00A2	  12
LED3				  NUMBER    00A3	  13
LED4				  NUMBER    00A4	  14
LED5				  NUMBER    00A5	  15
LED6				  NUMBER    00A6	  16
LED7				  NUMBER    00A7	  17
LED_OUT				  NUMBER    0093	  19
MAIN_TOGGLE			  CODE	    0036	 223
MSG_DISTANCE			  CODE	    00E3	 345
MSG_PULSE			  CODE	    00CA	 343
MSG_START			  CODE	    00D2	 344
NO_ECHO				  CODE	    0042	 234
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PCON				  DATA	      87
PRINT_ONES			  CODE	    0096	 158
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PX0				  BIT	      B8
PX1				  BIT	      BA
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RI				  BIT	      98
RS0				  BIT	      D3
RS1				  BIT	      D4
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SINT				  CODE	    0023
SKIP_HUNDREDS			  CODE	    0084	 144
SKIP_TENS			  CODE	    008D	 151
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SP				  DATA	      81
START				  CODE	    0003	 193
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 10



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
TCON				  DATA	      88
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TXD				  BIT	      B1
US_ECHO_R			  NUMBER    0090	   8
US_TRIG_R			  NUMBER    0091	   7
WAIT_ECHO_HIGH			  CODE	    0015	  50
WAIT_ECHO_LOW			  CODE	    0025	  64
WAIT_RISE			  CODE	    001E	  59
WR				  BIT	      B6
